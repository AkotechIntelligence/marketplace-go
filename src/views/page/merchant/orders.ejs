<div class="account-header">
    <div class="d-flex justify-content-between align-items-center">
        <div>
            <h1 class="account-title">
                <% if (shopUuid) { %>
                    <%= shop.shopName %> - Orders
                <% } else { %>
                    All Orders
                <% } %>
            </h1>
            <p class="account-subtitle">
                <% if (shopUuid) { %>
                    Manage orders for <%= shop.shopName %>
                <% } else { %>
                    Manage all orders across your shops
                <% } %>
            </p>
        </div>
        <% if (shopUuid) { %>
            <a href="/merchant/orders" class="btn btn-outline-secondary">
                <i class="fas fa-arrow-left"></i> All Orders
            </a>
        <% } %>
    </div>
</div>

<%- include('./_order_filters') %>

<div class="account-card">
    <%- include('./_order_table', { orders }) %>
</div>

<!-- Order Details Modal -->
<div class="modal fade" id="orderDetailsModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Order Details</h5>
                <button type="button" class="close" data-dismiss="modal">
                    <span>&times;</span>
                </button>
            </div>
            <div class="modal-body" id="orderDetailsContent"></div>
        </div>
    </div>
</div>

<script>
$(document).ready(function() {
    // Initialize DataTable
    const ordersTable = $('#ordersTable').DataTable({
        order: [[1, 'desc']], // Sort by date descending
        pageLength: 25,
        dom: 'Bfrtip',
        buttons: ['csv', 'excel', 'pdf'],
        responsive: true
    });

    // Handle date range selection
    $('#dateRange').change(function() {
        const value = $(this).val();
        const customDateRange = $('.custom-date-range');
        
        if (value === 'custom') {
            customDateRange.show();
        } else {
            customDateRange.hide();
            applyDateFilter(value);
        }
    });

    // Handle filter form submission
    $('#orderFilterForm').submit(function(e) {
        e.preventDefault();
        applyFilters();
    });

    // View order details
    $(document).on('click', '.view-order', function() {
        const orderId = $(this).data('order-id');
        loadOrderDetails(orderId);
    });

    // Update order status
    $(document).on('click', '.update-status', function() {
        const orderId = $(this).data('order-id');
        updateOrderStatus(orderId);
    });
});

function applyDateFilter(range) {
    let startDate, endDate;
    const today = new Date();
    
    switch(range) {
        case 'today':
            startDate = today;
            endDate = today;
            break;
        case 'yesterday':
            startDate = new Date(today.setDate(today.getDate() - 1));
            endDate = new Date(today);
            break;
        case 'last7days':
            startDate = new Date(today.setDate(today.getDate() - 7));
            endDate = new Date();
            break;
        case 'last30days':
            startDate = new Date(today.setDate(today.getDate() - 30));
            endDate = new Date();
            break;
    }

    if (startDate && endDate) {
        $.fn.dataTable.ext.search.push(
            function(settings, data, dataIndex) {
                const orderDate = new Date(data[1]);
                return orderDate >= startDate && orderDate <= endDate;
            }
        );
        $('#ordersTable').DataTable().draw();
    }
}

function applyFilters() {
    const dateRange = $('#dateRange').val();
    const status = $('#orderStatus').val();
    
    let startDate, endDate;
    
    if (dateRange === 'custom') {
        startDate = new Date($('#startDate').val());
        endDate = new Date($('#endDate').val());
    } else {
        // Use predefined date range
        applyDateFilter(dateRange);
    }
    
    // Filter by status if selected
    if (status) {
        $('#ordersTable').DataTable()
            .column(4)
            .search(status)
            .draw();
    }
}

async function loadOrderDetails(orderId) {
    try {
        const response = await fetch(`/api/merchant/orders/${orderId}`);
        const data = await response.json();
        
        if (data.success) {
            const order = data.order;
            const content = `
                <div class="order-details">
                    <div class="row mb-4">
                        <div class="col-md-6">
                            <h6 class="font-weight-bold">Customer Details</h6>
                            <p class="mb-1">${order.User.fullName}</p>
                            <p class="mb-1">${order.User.email}</p>
                            <p class="mb-1">${order.shippingAddress}</p>
                        </div>
                        <div class="col-md-6 text-md-right">
                            <h6 class="font-weight-bold">Order Information</h6>
                            <p class="mb-1">Order ID: #${order.uuid}</p>
                            <p class="mb-1">Date: ${new Date(order.createdAt).toLocaleString()}</p>
                            <p class="mb-1">Status: ${order.status}</p>
                        </div>
                    </div>
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Product</th>
                                <th>Price</th>
                                <th>Quantity</th>
                                <th>Total</th>
                            </tr>
                        </thead>
                        <tbody>
                            ${order.orderItems.map(item => `
                                <tr>
                                    <td>${item.product.name}</td>
                                    <td>${order.currencyCode} ${item.price.toFixed(2)}</td>
                                    <td>${item.quantity}</td>
                                    <td>${order.currencyCode} ${(item.price * item.quantity).toFixed(2)}</td>
                                </tr>
                            `).join('')}
                        </tbody>
                        <tfoot>
                            <tr>
                                <td colspan="3" class="text-right font-weight-bold">Total:</td>
                                <td>${order.currencyCode} ${order.total.toFixed(2)}</td>
                            </tr>
                        </tfoot>
                    </table>
                </div>
            `;
            $('#orderDetailsContent').html(content);
            $('#orderDetailsModal').modal('show');
        } else {
            throw new Error(data.message || 'Error loading order details');
        }
    } catch (error) {
        console.error('Error:', error);
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: error.message || 'Error loading order details'
        });
    }
}

async function updateOrderStatus(orderId) {
    const { value: status } = await Swal.fire({
        title: 'Update Order Status',
        input: 'select',
        inputOptions: {
            'pending': 'Pending',
            'processing': 'Processing',
            'completed': 'Completed',
            'cancelled': 'Cancelled'
        },
        inputPlaceholder: 'Select status',
        showCancelButton: true
    });

    if (status) {
        try {
            const response = await fetch(`/api/merchant/orders/${orderId}/status`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ status })
            });
            
            const data = await response.json();
            if (data.success) {
                Swal.fire({
                    icon: 'success',
                    title: 'Status Updated',
                    text: 'Order status has been updated successfully'
                }).then(() => {
                    window.location.reload();
                });
            } else {
                throw new Error(data.message || 'Error updating status');
            }
        } catch (error) {
            console.error('Error:', error);
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: error.message || 'Error updating status'
            });
        }
    }
}
</script>